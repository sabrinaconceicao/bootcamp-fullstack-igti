{"ast":null,"code":"function leftPad(value, count = 2, char = \"0\") {\n  const stringValue = value.toString();\n  let newValue = stringValue;\n\n  if (stringValue.length < count) {\n    for (let i = 0; i < count - stringValue.length; i++) {\n      newValue = char + stringValue;\n    }\n  }\n\n  return newValue;\n}\n\nfunction getNewTimestamp() {\n  const now = new Date();\n  let results = \"\";\n  results += leftPad(now.getDate());\n  results += \"/\";\n  results += leftPad(now.getMonth() + 1);\n  results += \"/\";\n  results += now.getFullYear();\n  results += \" \";\n  results += leftPad(now.getHours());\n  results += \":\";\n  results += leftPad(now.getMinutes());\n  results += \":\";\n  results += leftPad(now.getSeconds());\n  results += \".\";\n  results += leftPad(now.getMilliseconds(), 3);\n  return results;\n}\n\nexport { getNewTimestamp };","map":{"version":3,"sources":["C:/Users/sabrina da conceição/Desktop/Bootcamp-IGTI/Modulo03/CAP01/aula03/react-classes/src/helpers/dateTimeHelpers.js"],"names":["leftPad","value","count","char","stringValue","toString","newValue","length","i","getNewTimestamp","now","Date","results","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","getMilliseconds"],"mappings":"AAAA,SAASA,OAAT,CAAiBC,KAAjB,EAAwBC,KAAK,GAAG,CAAhC,EAAmCC,IAAI,GAAG,GAA1C,EAA+C;AAC7C,QAAMC,WAAW,GAAGH,KAAK,CAACI,QAAN,EAApB;AACA,MAAIC,QAAQ,GAAGF,WAAf;;AAEA,MAAIA,WAAW,CAACG,MAAZ,GAAqBL,KAAzB,EAAgC;AAC9B,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAAK,GAAGE,WAAW,CAACG,MAAxC,EAAgDC,CAAC,EAAjD,EAAqD;AACnDF,MAAAA,QAAQ,GAAGH,IAAI,GAAGC,WAAlB;AACD;AACF;;AACD,SAAOE,QAAP;AACD;;AAED,SAASG,eAAT,GAA2B;AACzB,QAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACA,MAAIC,OAAO,GAAG,EAAd;AAEAA,EAAAA,OAAO,IAAIZ,OAAO,CAACU,GAAG,CAACG,OAAJ,EAAD,CAAlB;AACAD,EAAAA,OAAO,IAAI,GAAX;AACAA,EAAAA,OAAO,IAAIZ,OAAO,CAACU,GAAG,CAACI,QAAJ,KAAiB,CAAlB,CAAlB;AACAF,EAAAA,OAAO,IAAI,GAAX;AACAA,EAAAA,OAAO,IAAIF,GAAG,CAACK,WAAJ,EAAX;AACAH,EAAAA,OAAO,IAAI,GAAX;AACAA,EAAAA,OAAO,IAAIZ,OAAO,CAACU,GAAG,CAACM,QAAJ,EAAD,CAAlB;AACAJ,EAAAA,OAAO,IAAI,GAAX;AACAA,EAAAA,OAAO,IAAIZ,OAAO,CAACU,GAAG,CAACO,UAAJ,EAAD,CAAlB;AACAL,EAAAA,OAAO,IAAI,GAAX;AACAA,EAAAA,OAAO,IAAIZ,OAAO,CAACU,GAAG,CAACQ,UAAJ,EAAD,CAAlB;AACAN,EAAAA,OAAO,IAAI,GAAX;AACAA,EAAAA,OAAO,IAAIZ,OAAO,CAACU,GAAG,CAACS,eAAJ,EAAD,EAAwB,CAAxB,CAAlB;AAEA,SAAOP,OAAP;AACD;;AAED,SAASH,eAAT","sourcesContent":["function leftPad(value, count = 2, char = \"0\") {\r\n  const stringValue = value.toString();\r\n  let newValue = stringValue;\r\n\r\n  if (stringValue.length < count) {\r\n    for (let i = 0; i < count - stringValue.length; i++) {\r\n      newValue = char + stringValue;\r\n    }\r\n  }\r\n  return newValue;\r\n}\r\n\r\nfunction getNewTimestamp() {\r\n  const now = new Date();\r\n  let results = \"\";\r\n\r\n  results += leftPad(now.getDate());\r\n  results += \"/\";\r\n  results += leftPad(now.getMonth() + 1);\r\n  results += \"/\";\r\n  results += now.getFullYear();\r\n  results += \" \";\r\n  results += leftPad(now.getHours());\r\n  results += \":\";\r\n  results += leftPad(now.getMinutes());\r\n  results += \":\";\r\n  results += leftPad(now.getSeconds());\r\n  results += \".\";\r\n  results += leftPad(now.getMilliseconds(), 3);\r\n\r\n  return results;\r\n}\r\n\r\nexport { getNewTimestamp };\r\n"]},"metadata":{},"sourceType":"module"}